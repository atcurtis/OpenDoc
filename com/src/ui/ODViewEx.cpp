//====START_GENERATED_PROLOG======================================
//
//
//   COMPONENT_NAME: odui
//
//   CLASSES: none
//
//   ORIGINS: 82,27
//
//
//   (C) COPYRIGHT International Business Machines Corp. 1995,1996
//   All Rights Reserved
//   Licensed Materials - Property of IBM
//   US Government Users Restricted Rights - Use, duplication or
//   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//   	
//   IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
//   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   PURPOSE. IN NO EVENT SHALL IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
//   USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
//   OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
//   OR PERFORMANCE OF THIS SOFTWARE.
//
//====END_GENERATED_PROLOG========================================
//
/* @(#) 1.3 com/src/ui/ODViewEx.cpp, odui, od96os2, odos29646d 10/31/96 12:45:47 [11/15/96 15:52:30] */
/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.41
 */

/***************************************************************************
 *   File:    odviewex.cpp
 *
 *   Contains:  Class definition for ODViewExtension
 *
 *
 *   Copyright:  (c) 1994 by IBM Corp., all rights reserved.
 *
 *   Change History (most recent first):
 *
 *      <3>   11/25/95 BLG 129917  Fix so multiple detail columns will be added
 *      <2>   10/05/95 BLG 129904  Added parameter checking to AddDetailsColumns()
 *      <1>   06/03/95 st  124328  fixes for includes/classes
 **************************************************************************/

#ifndef SOM_Module_odviewex_Source
#define SOM_Module_odviewex_Source
#endif
#define ODViewExtension_Class_Source
#define VARIABLE_MACROS

#ifndef _ODCNRVWH_
#include "odcnrvw.h"      // includes os2.h
#endif

#include "odviewex.xih"

#ifndef SOM_ODStorageUnit_xh
#include "StorageU.xh"
#endif

#ifndef SOM_CMDocument_xh
#include "CMDoc.xh"
#endif

#ifndef SOM_ODSession_xh
#include "ODSessn.xh"
#endif

#ifndef SOM_ODPart_xh
#include "Part.xh"
#endif

#ifndef _EXCEPT_
#include "Except.h"
#endif
// 129904 start includes
#ifndef _TEMPOBJ_
#include "TempObj.h"
#endif

#ifndef SOM_ODEmbeddedFramesIterator_xh
#include <embfritr.xh>
#endif

#ifndef SOM_ODFrame_xh
#include <Frame.xh>
#endif
// end includes for 129904
//#include "debug.h"

#include "CmCtr.xih"
#include "MemCtr.xih"

#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <bentohdr.h>

//#ifndef _INFOUTIL_
//#include "InfoUtil.h"
//#endif

#ifndef _ODTYPES_
#include "ODTypes.h"
#endif

#include <odcnrvw.xih>

//=============================================================================
// void  ODViewExtensionInitViewExtension()
//-----------------------------------------------------------------------------
// Initializes the ODViewExtension object and sets the object as an extension
// of the ODPart type passed in as a parameter.  This will be called by the
// ODInfo object when the part requests the ODViewExtension object.  Subclasses
// should call the parent method in their method override.
//
// Inputs
//    part  The part that will be the owner of this extension object
//=============================================================================
SOM_Scope void  SOMLINK ODViewExtensionInitViewExtension(ODViewExtension *somSelf,
                                                          Environment *ev,
                                                         ODPart* part)
{
   ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
   ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionInitViewExtension");

   // call instance of ODCnrView with the Init View method

   _CnrViewListHead=kODNULL;
   _sColDataType = kODNULL;
   _sPartSUPropName = kODNULL;
   _sPartSUValName = kODNULL;
   _ulNumberofColumns = 0;
   _pPartODFieldInfo = kODNULL;
  _fBase =  part  ; // 129904  store owning part

}



//=============================================================================
// ODBoolean ODViewExtensionDisplayView();
//-----------------------------------------------------------------------------
// Display View is called by the active part who owns this view extension. Part
// developers who subclass ODViewExtension and wish to provide their own
// custom tree view need to override this method to provide their custom view.
// They should pass the opendoc-defined views to the parent.
//
// Inputs
//    rootpart    Part that will be root when view is displayed
//    ulViewType  View to display
//                   OD_TREEVIEW
//                   OD_ICONVIEW
//                   OD_DETAILSVIEW
// Returns
//    TRUE  - it worked
//    FALSE - it did not work
//=============================================================================
SOM_Scope ODBoolean  SOMLINK ODViewExtensionDisplayView(ODViewExtension *somSelf,
                                             Environment *ev, ODPart* rootpart, ODULong ulViewType)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionDisplayView");
    ODBoolean rc= TRUE;             // return a value 129740
    ODCnrView *CurrentView = kODNULL;
    ODCnrViewList *pHead = _CnrViewListHead;

    while (pHead) {
       if (pHead->viewType == ulViewType) {
          CurrentView = pHead->ContainerView;
          break;
       }
       else  pHead = pHead->Next;
    }
    if (!CurrentView) {
       CurrentView = new ODCnrView;
       CurrentView->InitCnrView(ev,somSelf);

       pHead = (ODCnrViewList *) malloc (sizeof (ODCnrViewList));
       pHead->ContainerView = CurrentView;
       pHead->viewType = ulViewType;
       pHead->Next = _CnrViewListHead;
       _CnrViewListHead = pHead;
    }

    rc = CurrentView->CnrDisplayView(ev, rootpart,  ulViewType,_ulNumberofColumns); // store return value 129740

   // Free all the mempry associated with the additional columns;
   int i;
   for (i = 0; i < _ulNumberofColumns; i++) {
      free(_sColDataType[i]);
      free(_sPartSUPropName[i]);
      free(_sPartSUValName[i]);
      free(_pPartODFieldInfo[i].sTitleText);
   }
   free(_sColDataType);
   free(_sPartSUPropName);
   free(_sPartSUValName);
   _ulNumberofColumns = 0;
   free(_pPartODFieldInfo);
   _sColDataType = _sPartSUPropName = _sPartSUValName = kODNULL;
   _pPartODFieldInfo = kODNULL;

    /* Return statement to be customized: */
    return rc; // return a value. // 129740
}

//=============================================================================
// ODBoolean  ODViewExtensionAddDetailsColumns();
//-----------------------------------------------------------------------------
// Parts with additional information to display in details view should call this
// method, passing in the following:
//
// This method should be called before the DisplayView method.  This method may
// be called any number of times before calling DisplayView.  Additional column
// information will be appended to previous information already passed.
//
// Container Control Types
// Opendoc types passed
// passed in ODINFO        in sColDataType
// ----------------        ---------------
// CFA_BITMAPORICON        kODValueGPIcon
// CFA_DATE                kODDate
// CFA_TIME                kODTime_T
// CFA_STRING              kODASCIIText
// CFA_ULONG               kODULong
//
// Inputs
//    partODFieldInfo   array of  ODFIELDINFO structures containing the
//                      additional details that a part wants to display.
//                      Flags for items in this structure can be any of
//                      the CFA_* flags used for the FIELDINFO structure
//                      of a PM container control window.
//
//    sColDataType      array of STR64 strings for each of the ODFIELDINFO
//                      structures passed.  The data types must be Opendoc
//                      types, equivalent to the the CFA_* data types
//                      specified in the ODFIELDINFO structure
//    sPartSUPropName   array of STR64 strings containing the part's
//                      storage unit property  name
//    ulNumberofColumns ulong specifying how many additional columns are
//                      being requested.  This number is also the number
//                      of array elements passed in by each of the three
//                      above arrays.
//
// Return
//    ODBoolean         TRUE for successful completion
//                      FALSE for error
//=============================================================================
SOM_Scope ODBoolean  SOMLINK ODViewExtensionAddDetailsColumns(ODViewExtension *somSelf,
                                 Environment *ev,  ODFIELDINFO *PartODFieldInfo,
                                 char **sColDataType, char **sPartSUPropName,
                                 char   **sPartSUValName, ODULong ulNumberofColumns)
{
    int i;
    ODULong  offset = 0;
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionAddDetailsColumns");
//  invalid column type check  129904
    for (ODULong j=0;j<ulNumberofColumns ;j++ ) {
       if ( strcmp (  (sColDataType[j]), kODDate)!=0) {
         if ( strcmp ( (sColDataType[j]),kODTime_T)!=0) {
            if ( strcmp( (sColDataType[j]),kODULong)!=0) {
               if ( strcmp( (sColDataType[j]),kODISOStr)) {
                  if ( strcmp( (sColDataType[j]),kODIconFamily )) {
                     return FALSE;  // error
                  } /* endif */
               } /* endif */
            } /* endif */
         } /* endif */
       } /* endif */
    } /* endfor */
// check if property exist in storage unit and has value
   ODObject * owner = somSelf->GetBase(ev);  // 129904  start
   ODEmbeddedFramesIterator *CurrentFrameIter =((ODPart *) owner)->CreateEmbeddedFramesIterator(ev,kODNULL);
   if (CurrentFrameIter) {
      for (ODULong i=0;i<ulNumberofColumns ;i++ ) {
         ODFrame * ChildFrame = CurrentFrameIter->First(ev);
         while (ChildFrame) {
            TempODPart tempPart = ChildFrame->AcquirePart(ev);
            ODStorageUnit * su = tempPart->GetStorageUnit(ev);
            if (!su->Exists(ev,sPartSUPropName[i], sPartSUValName[i],0 )) {
               return FALSE;
            } /* endif */
            ChildFrame = kODNULL;
            if (CurrentFrameIter->IsNotComplete(ev)) {
               ChildFrame=CurrentFrameIter->Next(ev);
            } /* endif */
         } /* endwhile */
      } /* endfor   129917 */
      delete CurrentFrameIter;
   } /* endif */      // 129904 end parameter testing.


    if (!_ulNumberofColumns) {
        offset = 0;
        _ulNumberofColumns = ulNumberofColumns;
          _pPartODFieldInfo = (ODFIELDINFO *)malloc (_ulNumberofColumns * sizeof(ODFIELDINFO));
          _sColDataType = (char **)malloc (_ulNumberofColumns * sizeof(char *));
          _sPartSUPropName = (char **)malloc (_ulNumberofColumns * sizeof(char *));
          _sPartSUValName = (char **)malloc (_ulNumberofColumns * sizeof(char *));

    } else {
        offset = _ulNumberofColumns;
        _ulNumberofColumns += ulNumberofColumns;
          _pPartODFieldInfo = (ODFIELDINFO *)realloc(_pPartODFieldInfo,
                                    _ulNumberofColumns * sizeof(ODFIELDINFO));
          _sColDataType = (char **)realloc (_sColDataType,
                                   _ulNumberofColumns * sizeof(char *));
          _sPartSUPropName = (char **)realloc (_sPartSUPropName,
                                        _ulNumberofColumns * sizeof(char *));
          _sPartSUValName = (char **)realloc (_sPartSUValName,
                                   _ulNumberofColumns * sizeof(char *));
    }

   for (i = 0; i < ulNumberofColumns; i++) {
        _sColDataType[offset + i] = (char *)malloc (strlen(sColDataType[i]) + 1);
        strcpy(_sColDataType[offset + i], sColDataType[i]);
        _sPartSUPropName[offset + i] = (char *)malloc (strlen(sPartSUPropName[i]) + 1);
        strcpy(_sPartSUPropName[offset + i], sPartSUPropName[i]);
        _sPartSUValName[offset + i] = (char *)malloc (strlen(sPartSUValName[i]) + 1);
        strcpy(_sPartSUValName[offset + i], sPartSUValName[i]);
           memcpy(&(_pPartODFieldInfo[offset + i]), &(PartODFieldInfo[i]), sizeof(ODFIELDINFO));
           _pPartODFieldInfo[offset + i].sTitleText =
                                       (char *) malloc (strlen(PartODFieldInfo[i].sTitleText) + 1);
           strcpy(_pPartODFieldInfo[offset + i].sTitleText, PartODFieldInfo[i].sTitleText);
   }

    /* Return statement to be customized: */
    return TRUE;
}

//=============================================================================
// ODBoolean  ODViewExtensionRetrievePartAttributes()
//=============================================================================
SOM_Scope ODBoolean  SOMLINK ODViewExtensionRetrievePartAttributes(ODViewExtension *somSelf,
                                                                    Environment *ev,
                                                                   char** sColumnDataType,
                                                                   char** sPartSUPropName,
                                                                   char** sPartSUValName,
                                                                   ODULong* ulColumn)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionRetrievePartAttributes");

    if (*ulColumn > _ulNumberofColumns - 1) return FALSE;
    *sPartSUPropName = _sPartSUPropName[*ulColumn];
    *sPartSUValName = _sPartSUValName[*ulColumn];
    *sColumnDataType = _sColDataType[*ulColumn];
    return TRUE;
}


//=============================================================================
// ODBoolean ODViewExtensionRetrieveColumnAttributes()
//-----------------------------------------------------------------------------
// RetrieveColumnAttributes will return the ODFIELDINFO structure passed in by
// the part in AddDetailsColumns.  ulColumn represents  both the column to be
// shown in details view and an index into the array of ODFIELDINFO structures
// passed by the part.
//
// Inputs
//    odInfo   returns an ODFIELDINFO structure that was passed in by the part.
//    ulColumn array index (column number) of requested data
//
// Return
//    ODBoolean   TRUE for successful completion
//                FALSE for error
//=============================================================================
SOM_Scope ODBoolean  SOMLINK ODViewExtensionRetrieveColumnAttributes(ODViewExtension *somSelf,
                                                                      Environment *ev,
                                                                     ODFIELDINFO* odInfo,
                                                                     ODULong ulColumn)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionRetrieveColumnAttributes");

    if (ulColumn > _ulNumberofColumns - 1) return FALSE;
    *odInfo = _pPartODFieldInfo[ulColumn];
    return TRUE;
}

//=============================================================================
// void  ODViewExtensionTerminateView()
//-----------------------------------------------------------------------------
// TerminateView will perform internal cleanup for this class.
//=============================================================================
SOM_Scope void  SOMLINK ODViewExtensionTerminateView(ODViewExtension *somSelf,
                                                      Environment *ev,
                                                      ODCnrView*     Container)
{
   ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
   ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionTerminateView");

   ODCnrViewList *pHead = _CnrViewListHead, *priv = kODNULL;

   // call instance of ODCnrView with the Terminate View method
   Container->CnrTerminateView(ev);

   // Delete the node from the linked list.
   while (pHead->ContainerView != Container) {
      priv = pHead;
      pHead = pHead->Next;
   }
   if (!priv) {
      // This is the first node of the list that is to be deleted.
      _CnrViewListHead = pHead->Next;
      free (pHead);
   }
   else {
      priv->Next = pHead->Next;
      free (pHead);
   }

   // Destroy the container.
   delete Container;

}

//=============================================================================
SOM_Scope void  SOMLINK ODViewExtensionsomInit(ODViewExtension *somSelf)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionsomInit");

    ODViewExtension_parent_ODExtension_somInit(somSelf);
}

//=============================================================================
SOM_Scope void  SOMLINK ODViewExtensionsomUninit(ODViewExtension *somSelf)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionsomUninit");

    ODViewExtension_parent_ODExtension_somUninit(somSelf);
}

//=============================================================================
// override base method - return part owner of active frame 129904
// ============================================================================
SOM_Scope ODObject* SOMLINK ODViewExtensionGetBase(ODViewExtension *somSelf,Environment *ev)
{
    ODViewExtensionData *somThis = ODViewExtensionGetData(somSelf);
    ODViewExtensionMethodDebug("ODViewExtension","ODViewExtensionGetBase");

//    return (ODViewExtension_parent_ODExtension_somInit(somSelf)) ;

    return _fBase;
}


/* @(#)Z 1.10 os2/src/ui/MenuAdO.cpp, odui, od96os2, odos29646d 96/11/15 16:00:29 (96/10/27 13:30:02) */
//====START_GENERATED_PROLOG======================================
//
//
//   COMPONENT_NAME: odui
//
//   CLASSES: none
//
//   ORIGINS: 82,27
//
//
//   (C) COPYRIGHT International Business Machines Corp. 1995,1996
//   All Rights Reserved
//   Licensed Materials - Property of IBM
//   US Government Users Restricted Rights - Use, duplication or
//   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//   	
//   IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
//   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   PURPOSE. IN NO EVENT SHALL IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
//   USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
//   OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
//   OR PERFORMANCE OF THIS SOFTWARE.
//
//====END_GENERATED_PROLOG========================================
/* -------------------------------------------------------------------------
 *   File:	MenuAdO.cpp
 *   Contains:	implementation of ODOS2MenuAdapter object
 *   $Author:	purple $
 *   $Date:	1996/07/23 14:22:26 $
 *   $Source:
 *   $Revision: 1.1 $
 * -------------------------------------------------------------------------
*/

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.9
 */

#ifndef SOM_Module_menuado_Source
#define SOM_Module_menuado_Source
#endif

#define ODOS2MenuAdapter_Class_Source

#include <ODTypesF.h>
#include <ODTypesB.xh>
#include <GeoTypes.xh>
#include <ODTypesM.xh>
#include <Part.xh>

#include <ODUtils.h>
#include <OrdColl.h>

#define VARIABLE_MACROS

#include "MenuAdO.xih"

//=============================================================================
// local non-SOM methods
//=============================================================================
//-----------------------------------------------------------------------------
// copyMenuString
//-----------------------------------------------------------------------------
inline string copyMenuString(string inputString)
{
    if (inputString)
    {
        string s = (string) new char[strlen(inputString) + 1];
        return strcpy(s, inputString);
    }
    return kODNULL;

} /* end copyMenuString */

//=============================================================================
// ODOS2MenuAdapter class methods
//=============================================================================

//-----------------------------------------------------------------------------
// somInit [OVERRIDE]
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdaptersomInit(ODOS2MenuAdapter *somSelf)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdaptersomInit");

    ODOS2MenuAdapter_parent_ODObject_somInit(somSelf);

} /* end somInit */

//-----------------------------------------------------------------------------
// somUninit [OVERRIDE]
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdaptersomUninit(ODOS2MenuAdapter *somSelf)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdaptersomUninit");

    Environment* ev = somGetGlobalEnvironment();

    // Free up all menu items and item list
    // ------------------------------------
    while (_fMenuItems->Count() != 0)
    {
	ODOS2MenuItemAdapter* itemAd = (ODOS2MenuItemAdapter*) _fMenuItems->First();

	_fMenuItems->Remove((ElementType)itemAd);

	ODDeleteObject(itemAd->subMenuAdapter);

	ODDeleteObject(itemAd->text);

	ODDeleteObject(itemAd);
    }

    if (_fPart)
	_fPart->Release(ev);

    ODDeleteObject(_fMenuItems);

    ODDeleteObject(_fMenuLabel);

    ODOS2MenuAdapter_parent_ODObject_somUninit(somSelf);

} /* end somUninit */

//-----------------------------------------------------------------------------
// Init
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterInit(ODOS2MenuAdapter *somSelf, 
					     Environment *ev, 
					     ODMenuID id,
					     HWND parentHWND)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterInit");

    _fMenuID            = id;
    _fMenuIsEnabled     = kODTrue;
    _fMenuItems         = new OrderedCollection;

    // create empty menu window for self
    // ---------------------------------
    _fMenuHWND   = WinCreateMenu(HWND_OBJECT, NULL);
    _fParentHWND = parentHWND;

    if (parentHWND)
    {
	// copy style bits from parent
	// ---------------------------
	ULONG ulStyle = WinQueryWindowULong((HWND)parentHWND, QWL_STYLE);
	ulStyle |= WS_CLIPSIBLINGS;
	ulStyle &= ~WS_SAVEBITS;
	WinSetWindowULong((HWND)_fMenuHWND, QWL_STYLE, ulStyle);

	// copy ID and font name from parent
	// ---------------------------------
	const ULONG nMaxPath = 288;
	char  szFontName[nMaxPath];

	USHORT usID = (USHORT)WinQueryWindowUShort(parentHWND,QWS_ID);
	WinSetWindowUShort(_fMenuHWND, QWS_ID, usID);
	WinQueryPresParam(parentHWND, PP_FONTNAMESIZE, 0L, NULL,
			  nMaxPath, (PPVOID)szFontName, 0);
	WinSetPresParam(_fMenuHWND, PP_FONTNAMESIZE,
			strlen(szFontName)+1, (PVOID)szFontName);
    }

} /* end Init */

//-----------------------------------------------------------------------------
// AddItemsFromPlatMenu
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterAddItemsFromPlatMenu(ODOS2MenuAdapter *somSelf, 
							      Environment *ev, 
							     ODPlatformMenu platMenu)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterAddItemsFromPlatMenu");

    // add menu items copied from platform menu
    // ----------------------------------------

    ODUShort nItems = SHORT1FROMMR(WinSendMsg(platMenu, MM_QUERYITEMCOUNT, 0L, 0L));

    for (ODUShort pos = 0; pos < nItems; pos++)
    {
	ODMenuItemID itemID = SHORT1FROMMR(WinSendMsg(platMenu, MM_ITEMIDFROMPOSITION,
							MPFROMSHORT(pos), 0L));

	ODPlatformMenuItem platItem;
	MRESULT mres;

	mres = WinSendMsg(platMenu, MM_QUERYITEM, MPFROM2SHORT(itemID, FALSE),
						  MPFROMP(&platItem));

	if (platItem.hwndSubMenu)
	{
	    somSelf->AddSubMenuLast(ev, platItem.id, platItem.hwndSubMenu);
	}
	else
	{
	    somSelf->AddMenuItemLast(ev, itemID, &platItem);
	}

	// copy menu item text from platform menu item
	// -------------------------------------------
	char *itemText;

	ODULong nLen = SHORT1FROMMR(WinSendMsg(platMenu, MM_QUERYITEMTEXTLENGTH,
							 MPFROMSHORT(itemID), 0L));

	if (nLen > 0)
	{
	    itemText = new char[nLen+1];

	    mres = WinSendMsg(platMenu, MM_QUERYITEMTEXT,
				        MPFROM2SHORT(itemID, (nLen+1)), itemText);

	    somSelf->SetMenuItemText(ev, itemID, itemText);

	    delete itemText;
	}
    }
				
} /* end AddItemsFromPlatMenu */

//-----------------------------------------------------------------------------
// MenuID
//-----------------------------------------------------------------------------
SOM_Scope ODMenuID  SOMLINK ODOS2MenuAdapterMenuID(ODOS2MenuAdapter *somSelf, 
						   Environment *ev)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterMenuID");

    return _fMenuID;

} /* end MenuID */

//-----------------------------------------------------------------------------
// IsMenuEnabled
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterIsMenuEnabled(ODOS2MenuAdapter *somSelf, 
							   Environment *ev)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterIsMenuEnabled");

    return _fMenuIsEnabled;

} /* end IsMenuEnabled */

//-----------------------------------------------------------------------------
// DisableMenu
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterDisableMenu(ODOS2MenuAdapter *somSelf, 
						    Environment *ev)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterDisableMenu");

    if (! _fMenuIsEnabled) return;

    _fMenuIsEnabled = kODFalse;

    ODBoolean res = WinEnableMenuItem(_fParentHWND, _fMenuID, FALSE);

} /* end DisableMenu */

//-----------------------------------------------------------------------------
// EnableMenu
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterEnableMenu(ODOS2MenuAdapter *somSelf, 
						   Environment *ev)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterEnableMenu");

    if (_fMenuIsEnabled) return;

    _fMenuIsEnabled = kODTrue;

    ODBoolean res = WinEnableMenuItem(_fParentHWND, _fMenuID, TRUE);

} /* end EnableMenu */

//-----------------------------------------------------------------------------
// GetMenuText
//-----------------------------------------------------------------------------
SOM_Scope ODUShort  SOMLINK ODOS2MenuAdapterGetMenuText(ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							string* menuString)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetMenuText");

    ODUShort nCount   = 0;

    if (_fMenuLabel)
	nCount	    = strlen(_fMenuLabel);

    *menuString = copyMenuString(_fMenuLabel);

    return nCount;

} /* end GetMenuText */

//-----------------------------------------------------------------------------
// SetMenuText
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterSetMenuText(ODOS2MenuAdapter *somSelf, 
							 Environment *ev, 
							 string menuString)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetMenuText");

    ODDeleteObject(_fMenuLabel);

    _fMenuLabel = copyMenuString(menuString);

    ODBoolean res = WinSetMenuItemText(_fParentHWND, _fMenuID, _fMenuLabel);

    return kODTrue;

} /* end SetMenuText */

//-----------------------------------------------------------------------------
// GetMenuItemText
//-----------------------------------------------------------------------------
SOM_Scope ODUShort  SOMLINK ODOS2MenuAdapterGetMenuItemText(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID, 
							    string* menuItemString)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetMenuItemText");

    if (! menuItemString)
	return 0;

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return 0;

    ODUShort nCount = 0;

    if (itemAd->text)
	nCount = strlen(itemAd->text);

    *menuItemString = copyMenuString(itemAd->text);

    return nCount;

} /* end GetMenuItemText */

//-----------------------------------------------------------------------------
// SetMenuItemText
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean SOMLINK ODOS2MenuAdapterSetMenuItemText(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID, 
							    string menuItemString)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetMenuItemText");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    if ((menuItemString) && (itemAd->separator))
    {
	// OK, now it's NOT a separator...
	// -------------------------------
	itemAd->separator = kODFalse;

	ODPlatformMenuItem item;
	somSelf->GetPlatMenuItem(ev, itemAd, &item);

	ODUShort pos;
	somSelf->GetMenuItemPosition(ev, menuItemID, &pos);
	item.iPosition = pos;

	MRESULT mres = WinSendMsg(_fMenuHWND, MM_SETITEM,
				  MPFROM2SHORT(0, FALSE), MPFROMP(&item));

	// TO DO: should we complain to caller?
	// ------------------------------------
    }

    ODDeleteObject(itemAd->text);

    itemAd->text = copyMenuString(menuItemString);

    ODBoolean res = WinSetMenuItemText(_fMenuHWND, itemAd->id, itemAd->text);

    return kODTrue;

} /* SetMenuItemText */

//-----------------------------------------------------------------------------
// SetHideMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean SOMLINK ODOS2MenuAdapterSetHideMenuItem(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetHideMenuItem");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    if (! itemAd->hidden)
    {
	itemAd->hidden = kODTrue;
	MRESULT mres = WinSendMsg(_fMenuHWND, MM_DELETEITEM,
					      MPFROM2SHORT(itemAd->id, FALSE), 0L);
    }

    return kODTrue;

} /* end SetHideMenuItem */

//-----------------------------------------------------------------------------
// SetShowMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean SOMLINK ODOS2MenuAdapterSetShowMenuItem(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetShowMenuItem");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    if (itemAd->hidden)
    {
	itemAd->hidden = kODFalse;

	ODPlatformMenuItem item;
	somSelf->GetPlatMenuItem(ev, itemAd, &item);

	ODUShort pos;
	somSelf->GetMenuItemPosition(ev, menuItemID, &pos);
	item.iPosition = pos;

	MRESULT mres = WinSendMsg(_fMenuHWND, MM_INSERTITEM,
				  MPFROMP(&item), MPFROMP(itemAd->text));
    }

    return kODTrue;

} /* end SetShowMenuItem */

//-----------------------------------------------------------------------------
// CheckMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterCheckMenuItem(ODOS2MenuAdapter *somSelf, 
							   Environment *ev, 
							   ODMenuItemID menuItemID, 
							   ODBoolean check)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterCheckMenuItem");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    if (itemAd->checked != check)
    {
	itemAd->checked = check;
	ODBoolean res = WinCheckMenuItem(_fMenuHWND, itemAd->id, itemAd->checked);
    }

    return kODTrue;

} /* end CheckMenuItem */

//-----------------------------------------------------------------------------
// EnableMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterEnableMenuItem(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID, 
							    ODBoolean enable)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterEnableMenuItem");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    if (itemAd->enabled != enable)
    {
	itemAd->enabled = enable;
	ODBoolean res = WinEnableMenuItem(_fMenuHWND, itemAd->id, itemAd->enabled);
    }

    if (itemAd->subMenuAdapter)
    {
	if (enable)
	    (itemAd->subMenuAdapter)->EnableMenu(ev);
	else
	    (itemAd->subMenuAdapter)->DisableMenu(ev);
    }

    return kODTrue;

} /* end EnableMenuItem */

//-----------------------------------------------------------------------------
// AddMenuItemBefore
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterAddMenuItemBefore(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuItemID itemID, 
							ODPlatformMenuItem* item, 
							ODMenuItemID beforeID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterAddMenuItemBefore");

    if (! item)
	return kODFalse;

    MENUITEM *os2item = (MENUITEM*) item;

    // TO DO: warn callers not to do this!
    // -----------------------------------
    if (itemID == kODNULL)
	itemID = os2item->id;


    if (somSelf->ItemExists(ev, itemID))
	return kODFalse;

    // Create a new menu item adapter from the platform menu item
    // ----------------------------------------------------------
    ODOS2MenuItemAdapter* itemAd = new ODOS2MenuItemAdapter;

    itemAd->id		   = itemID;
    itemAd->parentAdapter  = somSelf;
    itemAd->subMenuAdapter = kODNULL;
    itemAd->enabled	   = kODTrue;
    itemAd->hidden	   = kODFalse;
    itemAd->checked	   = kODFalse;
    itemAd->separator	   = kODFalse;
    itemAd->text	   = kODNULL;

    if ( (os2item->afStyle & MIS_SUBMENU) &&
	 (os2item->hwndSubMenu)		  &&
	 (WinIsWindow(WinQueryAnchorBlock(HWND_DESKTOP),
					  os2item->hwndSubMenu)) )
    {
	itemAd->subMenuAdapter = new ODOS2MenuAdapter;
	(itemAd->subMenuAdapter)->Init(ev, itemID, _fMenuHWND);
	(itemAd->subMenuAdapter)->SetParentAdapter(ev, somSelf);
	(itemAd->subMenuAdapter)->AddItemsFromPlatMenu(ev, os2item->hwndSubMenu);
    }

    if (os2item->afAttribute & MIA_DISABLED)
	itemAd->enabled = kODFalse;

    if (os2item->afAttribute & MIA_CHECKED)
	itemAd->checked = kODTrue;

    if (os2item->afStyle & MIS_SEPARATOR)
	itemAd->separator = kODTrue;

    // TO DO: warn callers that this is NOT standard!
    // ----------------------------------------------
    if (os2item->afAttribute & CA_TITLESEPARATOR)
	itemAd->separator = kODTrue;

    // Add it to this menu adapter's collection
    // ----------------------------------------
    ODBoolean added = kODFalse;

    OrderedCollectionIterator iter(_fMenuItems);
    ODOS2MenuItemAdapter* nextAd = (ODOS2MenuItemAdapter*) iter.First();

    while ( (nextAd) && (! added) && (iter.IsNotComplete()) )
    {
	if (nextAd->id == beforeID)
	{
	    _fMenuItems->AddBefore((ElementType) nextAd, (ElementType) itemAd);
	    added = kODTrue;
	}
	else
	    nextAd = (ODOS2MenuItemAdapter*) iter.Next();
    }

    if (! added)
	_fMenuItems->AddLast((ElementType) itemAd);

    // Insert it into this menu adapter's platform menu
    // (Don't use passed-in item; may have wrong position)
    // ---------------------------------------------------
    ODPlatformMenuItem newPlatItem;
    somSelf->GetPlatMenuItem(ev, itemAd, &newPlatItem);

    ODUShort pos;
    somSelf->GetMenuItemPosition(ev, itemID, &pos);
    newPlatItem.iPosition = pos;

    MRESULT mres = WinSendMsg(_fMenuHWND, MM_INSERTITEM,
			      MPFROMP(&newPlatItem), MPFROMP(" "));

    return kODTrue;

} /* end AddMenuItemBefore */

//-----------------------------------------------------------------------------
// AddMenuItemLast
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterAddMenuItemLast(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuItemID itemID, 
							ODPlatformMenuItem* item)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterAddMenuItemLast");

    if (! item)
	return kODFalse;

    MENUITEM* os2item = (MENUITEM*) item;

    // TO DO: warn callers not to do this!
    // -----------------------------------
    if (itemID == kODNULL)
	itemID = os2item->id;

    if (somSelf->ItemExists(ev, itemID))
	return kODFalse;

    // Create a new menu item adapter from the platform menu item
    // ----------------------------------------------------------
    ODOS2MenuItemAdapter* itemAd = new ODOS2MenuItemAdapter;

    itemAd->id		   = itemID;
    itemAd->parentAdapter  = somSelf;
    itemAd->subMenuAdapter = kODNULL;
    itemAd->enabled	   = kODTrue;
    itemAd->hidden	   = kODFalse;
    itemAd->checked	   = kODFalse;
    itemAd->separator	   = kODFalse;
    itemAd->text	   = kODNULL;

    if ( (os2item->afStyle & MIS_SUBMENU) &&
	 (os2item->hwndSubMenu)		  &&
	 (WinIsWindow(WinQueryAnchorBlock(HWND_DESKTOP),
					  os2item->hwndSubMenu)) )
    {
	itemAd->subMenuAdapter = new ODOS2MenuAdapter;
	(itemAd->subMenuAdapter)->Init(ev, itemID, _fMenuHWND);
	(itemAd->subMenuAdapter)->SetParentAdapter(ev, somSelf);
	(itemAd->subMenuAdapter)->AddItemsFromPlatMenu(ev, os2item->hwndSubMenu);
    }

    if (os2item->afAttribute & MIA_DISABLED)
	itemAd->enabled = kODFalse;

    if (os2item->afAttribute & MIA_CHECKED)
	itemAd->checked = kODTrue;

    if (os2item->afStyle & MIS_SEPARATOR)
	itemAd->separator = kODTrue;

    // TO DO: warn callers that this is NOT standard!
    // ----------------------------------------------
    if (os2item->afAttribute & CA_TITLESEPARATOR)
	itemAd->separator = kODTrue;

    // Add it to this menu adapter's collection
    // ----------------------------------------
    _fMenuItems->AddLast((ElementType) itemAd);

    // Insert it into this menu adapter's platform menu
    // (Don't use passed-in item; may have wrong position)
    // ---------------------------------------------------
    ODPlatformMenuItem newPlatItem;
    somSelf->GetPlatMenuItem(ev, itemAd, &newPlatItem);
    newPlatItem.iPosition = MIT_END;

    MRESULT mres = WinSendMsg(_fMenuHWND, MM_INSERTITEM,
			      MPFROMP(&newPlatItem), MPFROMP(" "));

    return kODTrue;

} /* end AddMenuItemLast */


//-----------------------------------------------------------------------------
// AddSubMenuBefore
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterAddSubMenuBefore(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuID subMenuID, 
							ODPlatformMenu subMenu,
							ODMenuItemID beforeID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterAddSubMenuBefore");

    if (somSelf->GetSubMenu(ev, subMenuID))
	return kODFalse;

    // Create a menu adapter from the platform menu
    // --------------------------------------------
    ODOS2MenuAdapter* subMenuAd = new ODOS2MenuAdapter;
    subMenuAd->Init(ev, subMenuID, _fMenuHWND);
    subMenuAd->SetParentAdapter(ev, somSelf);
    subMenuAd->AddItemsFromPlatMenu(ev, subMenu);

    // Create a menu item adapter
    // --------------------------
    ODOS2MenuItemAdapter *subMenuItemAd = new ODOS2MenuItemAdapter;
    subMenuItemAd->subMenuAdapter = subMenuAd;

    subMenuItemAd->id		  = subMenuID;
    subMenuItemAd->parentAdapter  = somSelf;
    subMenuItemAd->subMenuAdapter = subMenuAd;
    subMenuItemAd->enabled	  = subMenuAd->IsMenuEnabled(ev);
    subMenuItemAd->hidden	  = kODFalse;
    subMenuItemAd->checked	  = kODFalse;
    subMenuItemAd->separator	  = kODFalse;
    subMenuItemAd->text		  = kODNULL;

    // Add it to this menu adapter's collection
    // ----------------------------------------
    ODBoolean added = kODFalse;

    OrderedCollectionIterator iter(_fMenuItems);
    ODOS2MenuItemAdapter* nextAd = (ODOS2MenuItemAdapter*) iter.First();

    while ( (nextAd) && (! added) && (iter.IsNotComplete()) )
    {
	if (nextAd->id == beforeID)
	{
	    _fMenuItems->AddBefore((ElementType) nextAd,
				   (ElementType) subMenuItemAd);
	    added = kODTrue;
	}
	else
	    nextAd = (ODOS2MenuItemAdapter*) iter.Next();
    }

    if (! added)
	_fMenuItems->AddLast((ElementType) subMenuItemAd);

    // Insert it into this menu adapter's platform menu
    // ------------------------------------------------
    ODPlatformMenuItem newPlatSubMenuItem;
    somSelf->GetPlatMenuItem(ev, subMenuItemAd, &newPlatSubMenuItem);

    ODUShort pos;
    somSelf->GetMenuItemPosition(ev, subMenuID, &pos);
    newPlatSubMenuItem.iPosition = pos;

    MRESULT mres = WinSendMsg(_fMenuHWND, MM_INSERTITEM,
			      MPFROMP(&newPlatSubMenuItem), MPFROMP(" "));

    return kODTrue;

} /* end AddSubMenuBefore */

//-----------------------------------------------------------------------------
// AddSubMenuLast
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterAddSubMenuLast(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuID subMenuID, 
							ODPlatformMenu subMenu)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterAddSubMenuLast");

    if (somSelf->GetSubMenu(ev, subMenuID))
	return kODFalse;

    // Create a menu adapter from the platform menu
    // --------------------------------------------
    ODOS2MenuAdapter* subMenuAd = new ODOS2MenuAdapter;
    subMenuAd->Init(ev, subMenuID, _fMenuHWND);
    subMenuAd->SetParentAdapter(ev, somSelf);
    subMenuAd->AddItemsFromPlatMenu(ev, subMenu);

    // Create a menu item adapter
    // --------------------------
    ODOS2MenuItemAdapter *subMenuItemAd = new ODOS2MenuItemAdapter;
    subMenuItemAd->subMenuAdapter = subMenuAd;

    subMenuItemAd->id		  = subMenuID;
    subMenuItemAd->parentAdapter  = somSelf;
    subMenuItemAd->subMenuAdapter = subMenuAd;
    subMenuItemAd->enabled	  = subMenuAd->IsMenuEnabled(ev);
    subMenuItemAd->hidden	  = kODFalse;
    subMenuItemAd->checked	  = kODFalse;
    subMenuItemAd->separator	  = kODFalse;
    subMenuItemAd->text		  = kODNULL;

    // Add it to this menu adapter's collection
    // ----------------------------------------
    _fMenuItems->AddLast((ElementType) subMenuItemAd);

    // Insert it into this menu adapter's platform menu
    // ------------------------------------------------
    ODPlatformMenuItem newPlatSubMenuItem;
    somSelf->GetPlatMenuItem(ev, subMenuItemAd, &newPlatSubMenuItem);
    newPlatSubMenuItem.iPosition = MIT_END;

    MRESULT mres = WinSendMsg(_fMenuHWND, MM_INSERTITEM,
			      MPFROMP(&newPlatSubMenuItem), MPFROMP(" "));

    return kODTrue;

} /* end AddSubMenuLast */

//-----------------------------------------------------------------------------
// GetSubMenu
//-----------------------------------------------------------------------------
SOM_Scope ODPlatformMenu  SOMLINK ODOS2MenuAdapterGetSubMenu(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuID subMenuID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetSubMenu");

    ODPlatformMenu platSubMenu = kODNULL;

    if (_fMenuID == subMenuID)
	return _fMenuHWND;

    OrderedCollectionIterator iter(_fMenuItems);
    for (ODOS2MenuItemAdapter* nextItemAd = (ODOS2MenuItemAdapter*) iter.First();
         ((! platSubMenu) && (iter.IsNotComplete()));
         nextItemAd = (ODOS2MenuItemAdapter*) iter.Next())
    {
	ODOS2MenuAdapter* nextSubMenuAd = nextItemAd->subMenuAdapter;

	if (nextSubMenuAd)
	{
	    platSubMenu = nextSubMenuAd->GetSubMenu(ev, subMenuID);
	}
    }

    return platSubMenu;
    
} /* end GetSubMenu */

//-----------------------------------------------------------------------------
// ItemExists
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterItemExists(ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterItemExists");

    ODOS2MenuItemAdapter* existing;

    return (somSelf->GetMenuItemAdapter(ev, menuItemID, &existing));

} /* end ItemExists */

//-----------------------------------------------------------------------------
// IsItemEnabled
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterIsItemEnabled(ODOS2MenuAdapter *somSelf, 
							   Environment *ev, 
							   ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterIsItemEnabled");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    return (itemAd->enabled);

} /* end IsItemEnabled */

//-----------------------------------------------------------------------------
// IsItemChecked
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterIsItemChecked(ODOS2MenuAdapter *somSelf, 
							   Environment *ev, 
							   ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterIsItemChecked");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    return (itemAd->checked);

} /* end IsItemChecked */

//-----------------------------------------------------------------------------
// IsItemHidden
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterIsItemHidden(ODOS2MenuAdapter *somSelf, 
							  Environment *ev, 
							  ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterIsItemHidden");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    return (itemAd->hidden);

} /* end IsItemHidden */

//-----------------------------------------------------------------------------
// RemoveMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterRemoveMenuItem(ODOS2MenuAdapter *somSelf, 
							    Environment *ev, 
							    ODMenuItemID menuItemID)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterRemoveMenuItem");

    ODOS2MenuItemAdapter* itemAd;

    if (! somSelf->GetMenuItemAdapter(ev, menuItemID, &itemAd))
	return kODFalse;

    _fMenuItems->Remove((ElementType) itemAd);

    MRESULT mres = WinSendMsg(_fMenuHWND, MM_DELETEITEM,
					  MPFROM2SHORT(itemAd->id, FALSE), 0L);

    ODDeleteObject(itemAd->subMenuAdapter);

    ODDeleteObject(itemAd->text);

    ODDeleteObject(itemAd);

    return kODTrue;

} /* end RemoveMenuItem */

//-----------------------------------------------------------------------------
// GetPlatMenuItem
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean SOMLINK ODOS2MenuAdapterGetPlatMenuItem(ODOS2MenuAdapter *somSelf, 
							 Environment *ev, 
							 ODOS2MenuItemAdapter* itemAd,
							 ODPlatformMenuItem* platMenuItem)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetPlatMenuItem");

    if (! platMenuItem)
	return kODFalse;

    MENUITEM* os2menuItem = (MENUITEM*) platMenuItem;

    // caller must set position, if needed
    // -----------------------------------
    os2menuItem->iPosition   = MIT_NONE;

    if (itemAd->subMenuAdapter)
	os2menuItem->afStyle = MIS_SUBMENU;
    else if (itemAd->separator)
	os2menuItem->afStyle = MIS_SEPARATOR;
    else
	os2menuItem->afStyle = MIS_TEXT;

    os2menuItem->afAttribute = 0;

    if ((! itemAd->subMenuAdapter) &&
	(! itemAd->separator)	   &&
	(itemAd->checked))
    {
	os2menuItem->afAttribute |= MIA_CHECKED;
    }

    if ((! itemAd->separator) &&
	(! itemAd->enabled))
    {
	os2menuItem->afAttribute |= MIA_DISABLED;
    }

    os2menuItem->id	  = itemAd->id;

    if (itemAd->subMenuAdapter)
    {
	ODPlatformMenu platSubMenu;
	(itemAd->subMenuAdapter)->GetPlatMenu(ev, &platSubMenu);
	os2menuItem->hwndSubMenu = (HWND) platSubMenu;
    }
    else
	os2menuItem->hwndSubMenu = NULLHANDLE;

    os2menuItem->hItem = NULLHANDLE;

    return kODTrue;

} /* end GetPlatMenuItem */

//-----------------------------------------------------------------------------
// GetPlatMenu
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterGetPlatMenu(ODOS2MenuAdapter *somSelf, 
                                                         Environment *ev, 
                                                         ODPlatformMenu* platMenu)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetPlatMenu");

    if (! platMenu)
	return kODFalse;

    *platMenu = (ODPlatformMenu) _fMenuHWND;

    return kODTrue;
} /* end GetPlatMenu */

//-----------------------------------------------------------------------------
// GetPart
//-----------------------------------------------------------------------------
SOM_Scope ODPart*  SOMLINK ODOS2MenuAdapterGetPart(ODOS2MenuAdapter *somSelf, 
                                                    Environment *ev)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetPart");

    return _fPart;

} /* end GetPart */

//-----------------------------------------------------------------------------
// SetPart
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterSetPart(ODOS2MenuAdapter *somSelf, 
                                                 Environment *ev, 
                                                ODPart* part)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetPart");

    if (part)
	part->Acquire(ev);

    if (_fPart)
	_fPart->Release(ev);

    _fPart = part;

} /* end SetPart */

//-----------------------------------------------------------------------------
// GetMenuItemAdapter
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterGetMenuItemAdapter(ODOS2MenuAdapter *somSelf, 
                                                 Environment *ev, 
                                                ODMenuItemID id,
                                                ODOS2MenuItemAdapter** itemAd)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetMenuItemAdapter");

    ODBoolean found = kODFalse;

    OrderedCollectionIterator iter(_fMenuItems);
    for (ODOS2MenuItemAdapter* nextAd = (ODOS2MenuItemAdapter*) iter.First();
         ((! found) && (iter.IsNotComplete()));
         nextAd = (ODOS2MenuItemAdapter*) iter.Next())
    {
         if (nextAd->id == id)
	 {
	     *itemAd = nextAd;
             found   = kODTrue;
	 }
    }

    return found;

} /* end GetMenuItemAdapter */

//-----------------------------------------------------------------------------
// GetMenuItemPosition
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterGetMenuItemPosition(ODOS2MenuAdapter *somSelf, 
								 Environment *ev, 
								 ODMenuItemID id,
								 ODUShort* pos)
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetMenuItemPosition");

    ODBoolean foundIt = kODFalse;
    ODUShort  currPos = 0;

    OrderedCollectionIterator iter(_fMenuItems);
    for (ODOS2MenuItemAdapter* nextAd = (ODOS2MenuItemAdapter*) iter.First();
         ((! foundIt) && (iter.IsNotComplete()));
         nextAd = (ODOS2MenuItemAdapter*) iter.Next())
    {
	if (nextAd->id == id)
	{
	    *pos    = currPos;
	    foundIt = kODTrue;
	}

	currPos++;
    }

    return foundIt;

} /* end GetMenuItemPosition */

//-----------------------------------------------------------------------------
// GetSubMenuAdapter
//-----------------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODOS2MenuAdapterGetSubMenuAdapter(
							ODOS2MenuAdapter *somSelf, 
							Environment *ev, 
							ODMenuID subMenuID,
							ODOS2MenuAdapter **subMenuAd) 
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetSubMenuAdapter");

    if (! subMenuAd)
	return kODFalse;

    if (_fMenuID == subMenuID)
    {
	*subMenuAd = somSelf;
	return kODTrue;
    }

    ODBoolean foundIt = kODFalse;

    OrderedCollectionIterator iter(_fMenuItems);
    for (ODOS2MenuItemAdapter* nextItemAd = (ODOS2MenuItemAdapter*) iter.First();
         ((! foundIt) && (iter.IsNotComplete()));
         nextItemAd = (ODOS2MenuItemAdapter*) iter.Next())
    {
	ODOS2MenuAdapter* nextSubMenuAd = nextItemAd->subMenuAdapter;

	if (nextSubMenuAd)
	{
	    foundIt = nextSubMenuAd->GetSubMenuAdapter(ev, subMenuID, subMenuAd);
	}
    }

    return foundIt;
    
} /* end GetSubMenuAdapter */

//-----------------------------------------------------------------------------
// GetParentAdapter
//-----------------------------------------------------------------------------

SOM_Scope void  SOMLINK ODOS2MenuAdapterGetParentAdapter(ODOS2MenuAdapter *somSelf, 
							  Environment *ev, 
							 ODOS2MenuAdapter **parentAd) 
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterGetParentAdapter");

    *parentAd = _fParentAdapter;

} /* end GetParentAdapter */

//-----------------------------------------------------------------------------
// SetParentAdapter
//-----------------------------------------------------------------------------
SOM_Scope void  SOMLINK ODOS2MenuAdapterSetParentAdapter(ODOS2MenuAdapter *somSelf, 
							  Environment *ev, 
							 ODOS2MenuAdapter *parentAd) 
{
    ODOS2MenuAdapterData *somThis = ODOS2MenuAdapterGetData(somSelf);
    ODOS2MenuAdapterMethodDebug("ODOS2MenuAdapter","ODOS2MenuAdapterSetParentAdapter");

    _fParentAdapter = parentAd;

} /* end SetParentAdapter */

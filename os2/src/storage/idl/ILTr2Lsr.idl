/* @(#)Z 1.3 os2/src/storage/idl/ILTr2Lsr.idl, oddataxfer, od96os2, odos29646d 96/11/15 15:29:37 (96/08/23 01:43:37) */
//#====START_GENERATED_PROLOG======================================
//#
//#
//#   COMPONENT_NAME: oddataxfer
//#
//#   CLASSES: none
//#
//#   ORIGINS: 82,27
//#
//#
//#   (C) COPYRIGHT International Business Machines Corp. 1995,1996
//#   All Rights Reserved
//#   Licensed Materials - Property of IBM
//#   US Government Users Restricted Rights - Use, duplication or
//#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//#   	
//#   IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
//#   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//#   PURPOSE. IN NO EVENT SHALL IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//#   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
//#   USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
//#   OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
//#   OR PERFORMANCE OF THIS SOFTWARE.
//#
//#====END_GENERATED_PROLOG========================================
//#

/********************************************************************/
/*                                                                  */
/* Copyright (C) Apple Computer, Inc., 1994                         */
/*                                                                  */
/********************************************************************/

#ifndef _ILTR2LSR_
#define _ILTR2LSR_

#include <ODObject.idl>
#include <IODDefs.idl>

interface IODLinkService;
interface IODLinkTarget;
interface ODStorageUnit;

interface IODLinkTargetToLinkSource : ODObject
{
  #ifdef __PRIVATE__

    ODUpdateID ForwardGetUpdateID (in ODLinkID linkID);

    ODTime ForwardGetChangeTime (in ODLinkID linkID);

    ODStorageUnit ForwardGetContentStorageUnit(in ODLinkID linkID,
                                               in ODLinkKey key);

    ODBoolean ForwardLock (in ODLinkID linkID,
                           in ODULong wait,
                           out ODLinkKey key);

    void ForwardUnlock (in ODLinkID linkID,
                        in ODLinkKey key,
                        in ODBoolean isLocal);

    void GetSourcePartDescription (in ODLinkID linkID,
                                   out ODLinkConnectionData* srcPartDesc);
      // Called by LinkTarget to get the description of the source Part.

    void LinkTargetClosed (in ODLinkID linkID,
                           in ODLinkConnectionID trgtID,
                           in ODBoolean isLocal);
      // Called by a tracked LinkTarget to inform that it is being closed.
      // A tracked registered LinkTarget does not have to call
      //   LinkTargetUnregister but this method only.

    void LinkTargetRemoved (in ODLinkID linkID,
                            in ODLinkConnectionID trgtID,
                            in ODBoolean isLocal);
      // Called by tracked LinkTarget to inform that the target part has just
      //   broken the link.

    void LinkTargetReopened (in ODLinkID linkID,
                             in ODLinkConnectionID trgtID,
                             in ODULong pid,
                             in ODLinkConnectionData trgtPartDesc,
                             in IODLinkTarget linkTrgt,
                             inout ODBoolean isLocal);
      // Called by a tracked LinkTarget to inform that it is reopened.

    void AddLinkTarget (in ODLinkID linkid,
                        in ODULong pid,
                        in ODLinkConnectionData trgtPartDesc,
                        in IODLinkTarget linkTrgt,
                        out ODStorageUnitID sourceSUID,
                        out ODLinkConnectionID trgtID,
                        out ODBoolean isLocal,
                        out ODBoolean trackTrgt);
      // Called in LinkService::EstablishLinkFromTSpec (which is called
      //   in LinkSpec::EstablishLink) or
      //   PersistentLinkSpec::EstablishLink to add a new LinkTarget to the
      //   LinkSource from a LinkSpec.
     // Also called when a link target is copied without its
      // source; the result is a new link to the original source


    void LockToRead (in ODLinkID linkID,
                     in ODULong wait,
                     out ODLinkKey key);
      // Called by LinkTarget to forward the Lock method of ODLink

    void RegisterTrackedLinkTarget (in ODLinkID linkID,
                                    in ODLinkConnectionID trgtID,
                                    in ODBoolean isLocal);
      // Called by tracked LinkTarget to forward the RegisterDependent method
      //   of ODLink.

    void RegisterUntrackedLinkTarget (in ODLinkID linkID,
                                      in IODLinkTarget linkTrgt,
                                      in ODLinkConnectionData* trgtPartDesc,
                                      in ODBoolean isLocal,
                                      out ODLinkConnectionID trgtID);
      // Called by untracked LinkTarget to forward the RegisterDependent method
      //   of ODLink.

    void ShowSourceContentFor (in ODLinkID linkID,
                               in string hostName);
      // Called by LinkTarget to forward the ShowSourceContent method of
      //   ODLink.
      // The hostName is needed to check if the request came from a local
      //   LinkTarget.

    void TargetPartDescriptionChanged (in ODLinkID linkID,
                                       in ODLinkConnectionID trgtID,
                                       in ODBoolean isLocal,
                                       in ODLinkConnectionData trgtPartDesc);
      // Called by a tracked LinkTarget to update its Part description.

    void UnregisterLinkTarget (in ODLinkID linkID,
                               in ODLinkConnectionID trgtID,
                               in ODBoolean isLocal);
      // Called by LinkTarget to forward the UnregisterDependent method of
      //   ODLink.

  #endif //__PRIVATE__

  #ifdef __SOMIDL__
    implementation {
      releaseorder:
        #ifdef __PRIVATE__
          ForwardGetUpdateID,
          ForwardGetChangeTime,
          ForwardGetContentStorageUnit,
          ForwardLock,
          ForwardUnlock,
          GetSourcePartDescription,
	  LinkTargetClosed,
	  LinkTargetRemoved,
	  LinkTargetReopened,
          AddLinkTarget,
          LockToRead,
          RegisterTrackedLinkTarget,
          RegisterUntrackedLinkTarget,
          ShowSourceContentFor,
          TargetPartDescriptionChanged,
          UnregisterLinkTarget;
        #else
          reserved1,
          reserved2,
          reserved3,
          reserved4,
          reserved5,
          reserved6,
          reserved7,
          reserved8,
          reserved9,
          reserved10,
          reserved11,
          reserved12,
          reserved13,
          reserved14,
          reserved15,
          reserved16;
	#endif //__PRIVATE__
    };
  #endif //__SOMIDL__
};

#endif //_ILTR2LSR_


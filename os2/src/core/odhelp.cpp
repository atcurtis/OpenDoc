/* @(#) 1.8.2.6 os2/src/core/odhelp.cpp, odcore, od96os2, odos29646d 10/23/96 10:59:36 [ 11/15/96 16:00:32 ] */
//====START_GENERATED_PROLOG======================================
//
//
//   COMPONENT_NAME: odcore
//
//   CLASSES: none
//
//   ORIGINS: 82,27
//
//
//   (C) COPYRIGHT International Business Machines Corp. 1995,1996
//   All Rights Reserved
//   Licensed Materials - Property of IBM
//   US Government Users Restricted Rights - Use, duplication or
//   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//   	
//   IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
//   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//   PURPOSE. IN NO EVENT SHALL IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR
//   CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
//   USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
//   OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE
//   OR PERFORMANCE OF THIS SOFTWARE.
//
//====END_GENERATED_PROLOG========================================
//
/********************************************************************/
/*  Licensed Materials - Property of IBM                            */
/*                                                                  */
/*                                                                  */
/* Copyright (C) International Business Machines Corp., 1994.       */
/* Copyright (C) Apple Computer, Inc., 1994                         */
/*                                                                  */
/*  US Government Users Restricted Rights -                         */
/*  Use, duplication, or disclosure restricted                      */
/*  by GSA ADP Schedule Contract with IBM Corp.                     */
/*                                                                  */
/*  IBM Change History (most recent first):                         */
/*  defect   date   Int.  Desc.                                     */
/*  143882 11/17/95 st    change window title of help to Help       */
/*         09/08/95 mjk   Add Unicode Support                       */
/*  128320 07/21/95 BLG   If invalid file name given to display help*/
/*                        or displayHelpIndex will return kODFalse  */
/*         07/12/95 KEK   Replace references to "docshell.hlp" with */
/*                          ODHELPFILE; #include "odres.h"          */
/*  124089 06/01/95 BLG   DisplayHelp & DisplayIndexHelp always     */
/*                          return false.                           */
/********************************************************************/
/*
  File:    ODHelp.cpp

  Contains:  Opendoc help code for OS/2 and Win NT/95

  Owned by:  Ben Garrett
*/
/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.41
 */

#ifndef SOM_Module_odhelp_Source
#define SOM_Module_odhelp_Source
#endif

#define INCL_DOS
#define INCL_WINPOINTERS
#define INCL_WINFRAMEMGR   /* fs_NOBYTEALIGN */
#define INCL_WINWINDOWMGR
#define INCL_WIN
#define INCL_GPI
#define INCL_WPLOCAL
#define INCL_WPCLASS
#include <os2.h>
#include <pmwp.h>

#include "odres.h"  /*KEK*/

#ifndef SOM_ODWindowState_xh
#include <WinStat.xh>
#endif

#ifndef SOM_ODSession_xh
#include <ODSessn.xh>
#endif

#include <ODTypesM.xh>

#ifndef _HLPPANELS_
#include <hlppanls.h>
#endif

#include "ODHelp.xih"

#include <ODPagtun.h>

#define ODHelp_Class_Source
static PFNWP ActiveWindowDefWndProc;
static HWND vhwndDesktopFrame;

#define IDH_DEFAULT_KEYS_HELP         193           //@SM05712
#define HELP_NOT_INITIALIZED            0
#define HELP_INITIALIZED                1
#define HELP_PREVIOUSLY_INITIALIZED     2
#define CCHMAXSTRING                  256
#define HELP_1                       1625   // from SHRESIDS.H
#define HELP_2                       1626   //      "
#define MESSAGEHELPTABLE             4002
#define IDX_PFNCI                       0
#define IDX_PFNDI                       1
#define IDX_PFNQI                       2
#define IDX_PFNAI                       3
#define IDX_PFNLT                       4
#define IDX_PFNCT                       5
#define ORD_WIN32CREATEHELPINSTANCE    51 /* 32:Win%CreateHelpInstance    */
#define ORD_WIN32DESTROYHELPINSTANCE   52 /* 32:Win%DestroyHelpInstance   */
#define ORD_WIN32QUERYHELPINSTANCE     53 /* 32:Win%QueryHelpInstance     */
#define ORD_WIN32ASSOCIATEHELPINSTANCE 54 /* 32:Win%AssociateHelpInstance */
#define ORD_WIN32LOADHELPTABLE         55 /* 32:Win%LoadHelpTable         */
#define ORD_WIN32CREATEHELPTABLE       56 /* 32:Win%CreateHelpTable       */    /*@ANC<-*/

//static SOMAny *LastHelpObject;                                          // MP 46657,SM12368
static BOOL    HelpStubHookIsSet;                                         //DD75307
static BOOL    HelpHelpHookIsSet;
static HWND    vhwndRealHelpInstance;                                     //DD75307
static HWND    vhwndActiveWindow;                                         // JT 49917 MP 46657,SM12368 //DD75307
static HWND    vhwndHelpInstance;
static HWND    vhwndMsgBoxHelpInstance;
static HWND    vhwndMessageBoxOwner;                                      // ?? what is it
static HMODULE vhmodHELPMGR;
static BOOL    vLoadedOk;                                                 // JAG67982  //DD75307
#define NUM_ORDINALS 6
static PFN   vpfn[NUM_ORDINALS]= { '\0','\0','\0','\0','\0','\0'};        //DD75307
static HWND vhwndDesktopCnr;


static ODSession *  vSession;

extern "C" {
 HWND EXPENTRY ShlCreateMsgBoxHelpInstance(VOID);
 //BOOL APIENTRY  WinDestroyHelpInstance( HWND hwndHelp );
 //

 BOOL InstallHelpStubHook(VOID);
 BOOL SetHelpStubHook(VOID);
 BOOL SetHelpHelpHook(VOID);
 VOID ReleaseHelpStubHook(VOID);
 VOID ReleaseHelpHelpHook(VOID);
 // BOOL LoadHELPMGR(VOID);
 VOID EXPENTRY CleanUpHelpStubHook(ULONG ExitType);
 VOID EXPENTRY CleanUpHelpHelpHook(ULONG ExitType);
 // HWND APIENTRY  WinQueryHelpInstance( HWND hwndApp );
 BOOL EXPENTRY HelpStubHook(HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr );
 BOOL EXPENTRY HelpHelpHook(HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr );
 ULONG InitializeHelp(VOID);
 MRESULT EXPENTRY DummyHelpSubclassProc(HWND hwnd, ULONG  msg,
                                        MPARAM mp1, MPARAM mp2 );

 HWND EXPENTRY ShlCreateHelpInstance(HWND hwndAssociate);
 MRESULT EXPENTRY ActiveHelpWindowSubclassProc(HWND   hwnd,
                                               ULONG  msg,
                                               MPARAM mp1,
                                               MPARAM mp2);
 // HWND APIENTRY  WinCreateHelpInstance(HAB hab, PHELPINIT pHelpInit );

 BOOL APIENTRY Win32CallHelpHook(SHORT sMode,                                //pwb90750
                                 SHORT idTopic,                              //pwb90750
                                 SHORT idSubtopic,                           //pwb90750
                                 PRECTL prcPosition);                        //pwb90750
}

 HWND EXPENTRY ShlCreateMsgBoxHelpInstance(VOID);
 // BOOL APIENTRY  WinDestroyHelpInstance( HWND hwndHelp );
 BOOL InstallHelpStubHook(VOID);
 BOOL SetHelpStubHook(VOID);
 BOOL SetHelpHelpHook(VOID);
 VOID ReleaseHelpStubHook(VOID);
 VOID ReleaseHelpHelpHook(VOID);
 VOID EXPENTRY CleanUpHelpStubHook(ULONG ExitType);
 VOID EXPENTRY CleanUpHelpHelpHook(ULONG ExitType);
 BOOL EXPENTRY HelpStubHook(HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr );
 BOOL EXPENTRY HelpHelpHook(HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr );
 ULONG InitializeHelp(VOID);
 MRESULT EXPENTRY DummyHelpSubclassProc(HWND hwnd, ULONG  msg, MPARAM mp1, MPARAM mp2 );
 HWND EXPENTRY ShlCreateHelpInstance(HWND hwndAssociate);
 MRESULT EXPENTRY ActiveHelpWindowSubclassProc(HWND   hwnd,
                                               ULONG  msg,
                                               MPARAM mp1,
                                               MPARAM mp2);
 // HWND APIENTRY  WinCreateHelpInstance(HAB hab, PHELPINIT pHelpInit );




//-----------------------------------------------------------------------
// ODHelpInitHelp
//-----------------------------------------------------------------------
SOM_Scope void  SOMLINK ODHelpInitHelp(ODHelp *somSelf,  Environment *ev,
                                       ODSession  *Session )
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpInitHelp");

  vSession          = Session;
  HWND hwndDocShell = kODNULL;
  vhwndDesktopFrame = hwndDocShell;
  // vhwndHelpAssociate
  vhwndMessageBoxOwner = hwndDocShell;
  InstallHelpStubHook();
}

static char strfile[80];

//-----------------------------------------------------------------------
// ODHelpDisplayHelp
//-----------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODHelpDisplayHelp(ODHelp *somSelf,
                                               Environment *ev,
                                               string sHelpFile,
                                               ODULong ulPanelId)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpDisplayHelp");

  if (strcmp( sHelpFile,strfile))
  {   // not same
    MRESULT usRc = WinSendMsg( vhwndHelpInstance, HM_SET_HELP_LIBRARY_NAME, sHelpFile,0L);
    if (usRc)                      
    {
      strcpy(strfile,"");  // Force reload of file on error
      return kODFalse;              
    } 
    strcpy(strfile,sHelpFile);
  }
  MRESULT usRc =  WinSendMsg( vhwndHelpInstance, HM_DISPLAY_HELP,MPARAM (ulPanelId),MPARAM (0L));
  if (usRc)         
  {
    return kODFalse;
  }
  else
  {
    return kODTrue;
  } /* endif */
}

//-----------------------------------------------------------------------
// ODHelpDisplayHelpIndex
//-----------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODHelpDisplayHelpIndex(ODHelp *somSelf,
                                                    Environment *ev,
                                                    string sHelpFile)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpDisplayHelpIndex");

  if (strcmp( sHelpFile,strfile))
  {   // not same
    MRESULT usRc = WinSendMsg( vhwndHelpInstance, HM_SET_HELP_LIBRARY_NAME, sHelpFile,0L);
    if (usRc)
    {
      strcpy(strfile,"");  // Force reload of file on error
      return kODFalse;
    }
    strcpy(strfile,sHelpFile);
  }

  MRESULT usRc = WinSendMsg( vhwndHelpInstance, HM_HELP_INDEX,MPARAM (0L),MPARAM (0L));
  if (usRc)               
  {
    return kODFalse;
  }
  else
  {
    return kODTrue;
  } /* endif */
}

//-----------------------------------------------------------------------
// ODHelpDisplayHelpUsingHelp
//-----------------------------------------------------------------------
SOM_Scope ODBoolean  SOMLINK ODHelpDisplayHelpUsingHelp(ODHelp *somSelf,
                                                        Environment *ev,
                                                        string sHelpFile)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpDisplayHelpUsingHelp");

  if (strcmp( sHelpFile,strfile))
  {   // not same
    MRESULT usRc = WinSendMsg( vhwndHelpInstance, HM_SET_HELP_LIBRARY_NAME, sHelpFile,0L);
    if (usRc)
    {
      strcpy(strfile,"");  // Force reload of file on error
      return kODFalse;
    }
    strcpy(strfile,sHelpFile);
  }

  MRESULT usRc = WinSendMsg( vhwndHelpInstance, HM_DISPLAY_HELP,MPARAM (0L),MPARAM (0L));
  if (usRc)
  {
    return kODFalse;
  }
  else
  {
    return kODTrue;
  }
}



//-----------------------------------------------------------------------
// ODHelpGetHelpID  (private)
//-----------------------------------------------------------------------
SOM_Scope  ODULong  SOMLINK ODHelpGetHelpID(ODHelp *somSelf, 
                                            Environment *ev,
                                            ODMenuID menuID)
{
    ODHelpData *somThis = ODHelpGetData(somSelf);
    ODHelpMethodDebug("ODHelp", "ODHelpGetHelpID");

    ODULong helpID;

    switch(menuID)
    {
        case IDMS_DOCUMENT:
            helpID = IDMS_DOCUMENT_PANEL;
            break;
        case DOC_NEW:
            helpID = 16;
            break;
        case DOC_OPENAS:
            helpID = IDMS_DOC_OPENAS_PANEL;
            break;
        case DOC_SAVE:
            helpID = IDMS_DOC_SAVE_PANEL;
            break;
        case DOC_SAVECOPY:
            helpID = IDMS_DOC_SAVECOPY_PANEL;
            break;
        case DOC_REVERTTOSAVED:
            helpID = IDMS_DOC_REVERTTOSAVED_PANEL;
            break;
        case DOC_DRAFTS:
            helpID = IDMS_DR_DRAFT_PANEL;
            break;
        case DOC_DRAFTCREATE:
            helpID = IDMS_CREATINGDRAFT_PANEL;
            break;
        case DOC_DRAFTHISTORY:
            helpID = IDMS_DRAFTWINDOW_PANEL;
            break;
        case DOC_PROPERTIES:
            helpID = IDMS_DOC_PROPERTIES_PANEL;
            break;
        case DOC_SETUP:
            helpID = 1005;
            break;
        case DOC_PRINT:
            helpID = IDMS_DOC_PRINT_PANEL;
            break;
        case DOC_CLOSE:
            helpID = 122;
            break;
        case IDMS_EDIT:
            helpID = IDMS_EDIT_PANEL;
            break;
        case EDIT_UNDO:
            helpID = IDMS_EDIT_UNDO_PANEL;
            break;
        case EDIT_REDO:
            helpID = IDMS_EDIT_REDO_PANEL;
            break;
        case EDIT_CUT:
            helpID = IDMS_EDIT_CUT_PANEL;
            break;
        case EDIT_COPY:
            helpID = IDMS_EDIT_COPY_PANEL;
            break;
        case EDIT_CREATE:
            helpID = IDMS_EDIT_CREATE_PANEL;
            break;
        case EDIT_PASTE:
            helpID = IDMS_EDIT_PASTE_PANEL;
            break;
        case EDIT_PASTEAS:
            helpID = 131;
            break;
        case EDIT_LINK_MENU:
            helpID = LINKINGITEMS_PANEL;
            break;
        case EDIT_PASTELINK:
            helpID = IDMS_EDIT_PASTELINK_PANEL;
            break;
        case EDIT_BREAKLINK:
            helpID = IDMS_EDIT_BREAKLINK_PANEL;
            break;
        case EDIT_LINKINFO:
            helpID = 123;
            break;
        case EDIT_DELETE:
            helpID = IDMS_EDIT_DELETE_PANEL;
            break;
        case EDIT_SELECTALL:
            helpID = IDMS_EDIT_SELECTALL_PANEL;
            break;
        case EDIT_DESELECTALL:
            helpID = IDMS_EDIT_DESELECTALL_PANEL;
            break;
        case EDIT_OPENSEL:
            helpID = IDMS_EDIT_OPENSEL_PANEL;
            break;
        case EDIT_INSERT:
            helpID = 29;
            break;
        case EDIT_SELPROPERTIES:
            helpID = IDMS_EDIT_SELPROPERTIES_PANEL;
            break;
        case IDMS_VIEW:
            helpID = IDMS_VIEW_PANEL;
            break;
        case VIEW_PROPERTIES:
            helpID = IDMS_VIEW_PROPERTIES_PANEL;
            break;
        case VIEW_SHOWAS:
            helpID = IDMS_VIEW_SHOWAS_PANEL;
            break;
        case VIEW_SASMALLICON:
            helpID = VIEW_SASMALLICON_PANEL;
            break;
        case VIEW_SALARGEICON:
            helpID = VIEW_SALARGEICON_PANEL;
            break;
        case VIEW_SATHUMBNAIL:
            helpID = VIEW_SATHUMBNAIL_PANEL;
            break;
        case VIEW_SAFRAME:
            helpID = VIEW_SAFRAME_PANEL;
            break;
        case VIEW_VIEWINWINDOW:
            helpID = 135;
            break;
        case IDMS_HELP:
            helpID = 43;
            break;
        case HELP_INDEX_OD:
            helpID = 33516;
            break;
        case HELP_GENERAL:
            helpID = 33517;
            break;
        case HELP_USING:
            helpID = 33518;
            break;
        case HELP_PRODUCTINFO:
            helpID = 33515;
            break;
        default:
            helpID = 0;
            break;
    }

    return helpID;
}

//-----------------------------------------------------------------------
// ODHelpTerminateHelp
//-----------------------------------------------------------------------
SOM_Scope void  SOMLINK ODHelpTerminateHelp(ODHelp *somSelf,
                                             Environment *ev)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpTerminateHelp");

  ReleaseHelpStubHook();  // get red of hook
  WinDestroyHelpInstance(vhwndHelpInstance);
  vhwndHelpInstance = NULL;
}

//-----------------------------------------------------------------------
// ODHelpsomInit
//-----------------------------------------------------------------------
SOM_Scope void  SOMLINK ODHelpsomInit(ODHelp *somSelf)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpsomInit");

  ODHelp_parent_ODObject_somInit(somSelf);
}

//-----------------------------------------------------------------------
// ODHelpsomUninit
//-----------------------------------------------------------------------
SOM_Scope void  SOMLINK ODHelpsomUninit(ODHelp *somSelf)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpsomUninit");

  ODHelp_parent_ODObject_somUninit(somSelf);
}

//-----------------------------------------------------------------------
// ODHelpPurge
//-----------------------------------------------------------------------
SOM_Scope ODSize  SOMLINK ODHelpPurge(ODHelp *somSelf,  Environment *ev,
                                      ODSize size)
{
  ODHelpData *somThis = ODHelpGetData(somSelf);
  ODHelpMethodDebug("ODHelp","ODHelpPurge");

  return (ODHelp_parent_ODObject_Purge(somSelf, ev, size));
}

// **********************************************************************
// **********************************************************************
// C code
// Ben Garrett C Calls to establish hook into Help and
// initialize help.
// **********************************************************************
//***********************************************************************
// **********************************************************************

//-----------------------------------------------------------------------
// ShlCreateMsgBoxHelpInstance
//-----------------------------------------------------------------------
HWND EXPENTRY ShlCreateMsgBoxHelpInstance(VOID)
{
  CHAR     szHelp1[CCHMAXSTRING];
  CHAR     szHelp2[CCHMAXSTRING];
  HELPINIT hmi;
  HWND     hwndHelpInstance;

  hmi.cb = sizeof(HELPINIT);
  hmi.ulReturnCode = 0L;
  hmi.pszTutorialName = NULL;
  hmi.phtHelpTable = (HELPTABLE*)(0xffff0000 | 1);
  hmi.hmodHelpTableModule = HMODULE (NULLHANDLE);
  hmi.hmodAccelActionBarModule = NULLHANDLE;
  hmi.idAccelTable = 0;
  hmi.idActionBar = 0;
#ifdef _UNICODE_
  WinLoadString( HAB(0), HMODULE (NULLHANDLE), OD_OPENDOCHELP, sizeof(szHelp1), szHelp1);
  hmi.pszHelpWindowTitle = (PSZ)szHelp1; // vapsz[IDS_HELP];
#else
  hmi.pszHelpWindowTitle = (PSZ)" HELP FOR OPENDOC "; // vapsz[IDS_HELP];
#endif
  hmi.fShowPanelId = CMIC_HIDE_PANEL_ID;
  hmi.pszHelpLibraryName = ODHELPFILE;  //   vszrWpmsgHlp ;

  hwndHelpInstance = WinCreateHelpInstance(HAB(0),&hmi);

  if (!hwndHelpInstance)
  {
    #ifdef DEBUG
    WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                  "Help creation error",
                  "Message box help failed to initialize",
                  1,
                  MB_OK | MB_APPLMODAL | MB_MOVEABLE);
    #else
    if (WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_1,sizeof(szHelp1),(PSZ)szHelp1) &&
        WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_2,sizeof(szHelp2),(PSZ)szHelp2))
    {
      WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                    szHelp1,
                    szHelp2,
                    1,
                    MB_OK | MB_APPLMODAL | MB_MOVEABLE);
    }
    #endif
    return NULLHANDLE;
  }
  else
  {
    if (hmi.ulReturnCode)
    {
      #ifdef DEBUG
      WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                    "Help terminated",
                    "Bad return code",
                    1,
                    MB_OK | MB_APPLMODAL | MB_MOVEABLE);
      #else
      if (WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_1,sizeof(szHelp1),(PSZ)szHelp1) &&
          WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_2,sizeof(szHelp2),(PSZ)szHelp2))
      {
        WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                      szHelp1,
                      szHelp2,
                      1,
                      MB_OK | MB_APPLMODAL | MB_MOVEABLE);
      }
      #endif
      WinDestroyHelpInstance(hwndHelpInstance);
      return NULLHANDLE;
    }
  }
  return (hwndHelpInstance);
}

//
#define CCHMAXSTRING 256

//-----------------------------------------------------------------------
// ShlCreateHelpInstance
//-----------------------------------------------------------------------
HWND EXPENTRY ShlCreateHelpInstance(HWND hwndAssociate)
{
  CHAR  szHelp1[CCHMAXSTRING];
  CHAR  szHelp2[CCHMAXSTRING];
  HELPINIT hmi;
  HWND hwndHelpInstance;

  hmi.cb = sizeof(HELPINIT);
  hmi.ulReturnCode = 0L;
  hmi.pszTutorialName = NULL;
  hmi.phtHelpTable =(HELPTABLE*)(0xffff0000 | 1);
  hmi.hmodHelpTableModule = NULLHANDLE;
  hmi.hmodAccelActionBarModule = NULLHANDLE;
  hmi.idAccelTable = 0;
  hmi.idActionBar = 0;
  #ifdef _UNICODE_
  WinLoadString(HAB(0), HMODULE (NULLHANDLE), OD_REALOPENDOCHELP, sizeof(szHelp1), szHelp1);
  hmi.pszHelpWindowTitle = (PSZ)szHelp1; // vapsz[IDS_HELP];
  #else
  hmi.pszHelpWindowTitle = (PSZ)" Help "; // vapsz[IDS_HELP];
  #endif
  hmi.fShowPanelId = CMIC_HIDE_PANEL_ID;
  hmi.pszHelpLibraryName = ODHELPFILE;

  hwndHelpInstance = WinCreateHelpInstance(HAB(0),&hmi);

  if (!hwndHelpInstance)
  {
    #ifdef DEBUG
    WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                  "Help creation error",
                  "Help failed to initialize",
                  1,
                  MB_OK | MB_APPLMODAL | MB_MOVEABLE);
    #else
    if (WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_1,sizeof(szHelp1),(PSZ)szHelp1) &&
        WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_2,sizeof(szHelp2),(PSZ)szHelp2))
    {
      WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                    szHelp1,
                    szHelp2,
                    1,
                    MB_OK | MB_APPLMODAL | MB_MOVEABLE);
    }
    #endif
  }
  else
  {
    if (hmi.ulReturnCode)
    {
      #ifdef DEBUG
      WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                    "Help terminated",
                    "Bad return code",
                    1,
                    MB_OK | MB_APPLMODAL | MB_MOVEABLE);
      #else
      if (WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_1,sizeof(szHelp1),(PSZ)szHelp1) &&
          WinLoadString(HAB(0),HMODULE (NULLHANDLE),HELP_2,sizeof(szHelp2),(PSZ)szHelp2))
      {
        WinMessageBox(HWND_DESKTOP, HWND_DESKTOP,
                      szHelp1,
                      szHelp2,
                      1,
                      MB_OK | MB_APPLMODAL | MB_MOVEABLE);
      }
      #endif
      WinDestroyHelpInstance(hwndHelpInstance);
    }
  }


  // We depend on the fact that a NULL hwnd Associate is coming from
  // the workplace desktop so that we can do the workaround below....
  if (!hwndAssociate)
  {
    WinSendMsg(vhwndDesktopCnr, WM_SETHELPINFO,MPFROMHWND(hwndHelpInstance),0L);
  }
  else
  {
  }
  return (hwndHelpInstance);
}

///************************************************************************\
//* InitializeHelp
//*
//* Initialize global help for the main thread. If we have already tried
//* to create a help instance, then return immediately.
//\************************************************************************/
//
ULONG InitializeHelp(VOID)
{
  if( vhwndRealHelpInstance ) return HELP_PREVIOUSLY_INITIALIZED;

  if (!vhwndActiveWindow)                                                      // MP 46657,SM12368
  {                                                                            // MP 46657,SM12368
    vhwndActiveWindow = WinCreateWindow(HWND_OBJECT,                           // MP 46657,SM12368
                                        WC_FRAME,
                                        NULL,
                                        NULLHANDLE,                            // JT 49917
                                        0,
                                        0,
                                        0,
                                        0,
                                        HWND_OBJECT,
                                        HWND_BOTTOM,
                                        0,
                                        NULL,
                                        NULL);
  }                                                                            // MP 46657,SM12368
  if (!vhwndActiveWindow)                                                      // MP 46657,SM12368
  {                                                                            // MP 46657,SM12368
    return HELP_NOT_INITIALIZED;                                               // MP 46657,SM12368
  }                                                                            // MP 46657,SM12368
  else                                                                         // MP 46657,SM12368
    ActiveWindowDefWndProc = WinSubclassWindow(vhwndActiveWindow,              // MP 46657,SM12368
                                           (PFNWP)ActiveHelpWindowSubclassProc); // MP 46657,SM12368

  if (!ActiveWindowDefWndProc)                                                 // MP 46657,SM12368
  {                                                                            // MP 46657,SM12368
    return HELP_NOT_INITIALIZED;                                               // MP 46657,SM12368
  }                                                                            // MP 46657,SM12368

  vhwndRealHelpInstance = ShlCreateHelpInstance(vhwndDesktopFrame);            // JT 49917
  if (vhwndRealHelpInstance)                                                   // JT 49917
  {
  /* we'd like to destroy the dummy window here, but this code may be called from
     the dummy window procedure, and that is dangerous. So we have to leave it
     existing forever. If anyone can think of a good clean way to destroy it,
     then by all means go ahead. @BSSM11626 */

    // WinDestroyWindow(vhwndHelpInstance);
    vhwndHelpInstance = vhwndRealHelpInstance;
    vhwndMsgBoxHelpInstance = ShlCreateMsgBoxHelpInstance();
    ReleaseHelpStubHook();
    SetHelpHelpHook();
    return HELP_INITIALIZED;
  }
  ReleaseHelpStubHook();
  SetHelpStubHook();
  return HELP_NOT_INITIALIZED;
}

///*********************************************************************\
// * DummyHelpSubclassProc
// *
// * This dummy help instance procedure monitors HM_ message in order to
// * initialize global help instance at first help request time.
//\*********************************************************************/
MRESULT EXPENTRY DummyHelpSubclassProc( HWND hwnd, ULONG  msg,
                                        MPARAM mp1, MPARAM mp2 )
{
  switch (msg)
  {
    case HM_DISMISS_WINDOW:
    case HM_DISPLAY_HELP:
    case HM_EXT_HELP:
    case HM_SET_ACTIVE_WINDOW:
    case HM_LOAD_HELP_TABLE:
    case HM_CREATE_HELP_TABLE:
    case HM_SET_HELP_WINDOW_TITLE:
    case HM_SET_SHOW_PANEL_ID:
    case HM_REPLACE_HELP_FOR_HELP:
    case HM_HELP_INDEX:
    case HM_HELP_CONTENTS:
    case HM_KEYS_HELP:
    case HM_SET_HELP_LIBRARY_NAME:
    case HM_SET_OBJCOM_WINDOW:
    case HM_UPDATE_OBJCOM_WINDOW_CHAIN:
    case HM_QUERY_DDF_DATA:
    case HM_INVALIDATE_DDF_DATA:
    case HM_QUERY:
    case HM_SET_COVERPAGE_SIZE:
      if( InitializeHelp() )
        return WinSendMsg(vhwndHelpInstance, msg, mp1, mp2);
      break;
  }
  return (MRESULT)FALSE;
}

///************************************************************************\
//* InstallHelpStubHook()
//*
//* Install our fake help instance. This lets us get control the first time
//* that the HM_DISPLAY_HELP is sent from methods.
//\************************************************************************/
BOOL InstallHelpStubHook(VOID)
{
  SetHelpStubHook();
  vhwndRealHelpInstance = NULLHANDLE;
  vhwndHelpInstance = WinCreateWindow(HWND_OBJECT, WC_STATIC,
                                      "\0"     , 0, 0, 0, 0, 0,
                                      HWND_OBJECT, HWND_BOTTOM,
                                      0, NULL, NULL );// vszrEmptry="\0".
  if( vhwndHelpInstance )
  {
    return (BOOL)WinSubclassWindow(vhwndHelpInstance, (PFNWP)DummyHelpSubclassProc);
  }
  return FALSE;
}

///************************************************************************\
//* HelpStubHook
//*
//* This hook is placed in the HK_HELP hook chain so that we can catch
//* the first time that the user presses PF1 or clicks on a "Help" button.
//* We then initialize our help instance and get the user's help request
//* passed back into the HK_HELP chain again by making a call to the
//* private function WinCallHelpHook()...
//\************************************************************************/
BOOL EXPENTRY HelpStubHook( HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr )
{
  return HelpHelpHook(AppHAB, Context, IdTopic, IdSubTopic, RectLPtr);
}

//
///************************************************************************\
//* CleanUpHelpStubHook
//*
//* Exit list routine that will ensures we always remove our stub HK_HELP
//* hook before exiting (avoids a RIP on exit).
//\************************************************************************/
VOID EXPENTRY CleanUpHelpStubHook(ULONG ExitType)
{
  ReleaseHelpStubHook();
  DosExitList(EXLST_EXIT,(PFNEXITLIST)CleanUpHelpStubHook);
}

//
///************************************************************************\
//* SetHelpStubHook()
//*
//* Add our stub HK_HELP hook to the hook chain. This lets us get control
//* the first time that the user presses PF1 or clicks on a Help button.
//\************************************************************************/
BOOL SetHelpStubHook()
{
  if( !HelpStubHookIsSet )
  {
    if( WinSetHook(NULLHANDLE, HMQ_CURRENT, HK_HELP, (PFN)HelpStubHook, NULLHANDLE) )
    {
      HelpStubHookIsSet = TRUE;
      DosExitList(EXLST_ADD,(PFNEXITLIST)CleanUpHelpStubHook);
      return TRUE;
    }
  }
  return FALSE;
}

//
//
///************************************************************************\
//* ReleaseHelpStubHook
//*
//* Remove our stub HK_HELP hook from the hook chain, if it has been
//* successfully added via SetHelpStubHook()...
//\************************************************************************/
VOID ReleaseHelpStubHook()
{
  if( HelpStubHookIsSet )
  {
    WinReleaseHook(NULLHANDLE, HMQ_CURRENT, HK_HELP, (PFN)HelpStubHook, NULLHANDLE);
    HelpStubHookIsSet = FALSE;
  }
}

///******* End of SM11127 ******************************************************/
//
//
//                                                                                /*MPSM12368*/
///*******************************************************************\
// * FUNCTION: ActiveHelpWindowSubclassProc                          *
// *                                                                 *
// * DESCRIPTION: Subclass the object window that is used to set the *
// * active window of the help instance this way we will get all the *
// * help notification messages we need                              *
// *                                                                 *
// * HISTORY: June 4, 1992   MindyP created for ptr SM12368          *
//\*******************************************************************/
MRESULT EXPENTRY ActiveHelpWindowSubclassProc(HWND   hwnd,
                                              ULONG  msg,
                                              MPARAM mp1,
                                              MPARAM mp2)
{
  switch (msg)
  {
    case HM_QUERY_KEYS_HELP:
      return (MRESULT) IDH_DEFAULT_KEYS_HELP;
    case HM_EXT_HELP_UNDEFINED:
      /* ID folks said to put up the extended help for the last */
      /* object that help was requested from.   OK...if you insist...*/
      // if (LastHelpObject) {
      //   DisplayDefaultHelp(LastHelpObject);
      // }
      return (MRESULT) FALSE;
  }

  if (ActiveWindowDefWndProc)
  {
    return (*ActiveWindowDefWndProc)(hwnd,msg,mp1,mp2);
  }
  else
    return WinDefWindowProc(hwnd,msg,mp1,mp2);
}

// constant hookstub


//-----------------------------------------------------------------------
// HelpHelpHook
//-----------------------------------------------------------------------
BOOL EXPENTRY HelpHelpHook( HAB    AppHAB,
                            USHORT Context,
                            USHORT IdTopic,
                            USHORT IdSubTopic,
                            PRECTL RectLPtr )
{
  SHORT id = 0;
  Environment *   ev  = somGetGlobalEnvironment();
  ODWindowState * win = vSession->GetWindowState(ev);
  HWND vhwnd          = win->GetFrontNonFloatingPlatformWindow(ev);

  if ((Context == (USHORT)HLPM_WINDOW) || (Context == (USHORT)HLPM_FRAME))
  {
    Context = HLPM_ODWINDOW;        // Define to OpenDoc window.
    id = IdTopic;                   // pass only the id for window
  }
  else if (Context == (USHORT)HLPM_MENU)
  {
    Context = HLPM_ODMENU;          // Define to OpenDoc menu.
    id = IdSubTopic;                // pass menu id
    if (IdSubTopic == (USHORT)-1)   // if menu id = -1 then it is top level of menu
      id = IdTopic;
  }
  else return FALSE;  // Not a help event we know of

  WinSendMsg (vhwnd, OD_HELP, MPARAM (Context) ,MPARAM(id));
  return FALSE;
}

//* SetHelpHelpHook()
//*
//* Add our stub HK_HELP hook to the hook chain. This lets us get control
//* the first time that the user presses PF1 or clicks on a Help button.
//\************************************************************************/
BOOL SetHelpHelpHook()
{
  if( !HelpHelpHookIsSet )
  {
    if( WinSetHook(NULLHANDLE,HMQ_CURRENT, HK_HELP, (PFN)HelpHelpHook, NULLHANDLE) )
    {
      HelpHelpHookIsSet = TRUE;
      DosExitList(EXLST_ADD,(PFNEXITLIST)CleanUpHelpHelpHook);
      return TRUE;
    }
  }
  return FALSE;
}

//* CleanUpHelpHelpHook
//*
//* Exit list routine that will ensures we always remove our stub HK_HELP
//* hook before exiting (avoids a RIP on exit).
//\************************************************************************/
VOID EXPENTRY CleanUpHelpHelpHook(ULONG ExitType)
{
  ReleaseHelpHelpHook();
  DosExitList(EXLST_EXIT,(PFNEXITLIST)CleanUpHelpHelpHook);
}

//* ReleaseHelpHelpHook
//*
//* Remove our stub HK_HELP hook from the hook chain, if it has been
//* successfully added via SetHelpStubHook()...
//\************************************************************************/
VOID ReleaseHelpHelpHook()
{
  if( HelpHelpHookIsSet )
  {
    WinReleaseHook(NULLHANDLE, HMQ_CURRENT, HK_HELP, (PFN)HelpHelpHook, NULLHANDLE);
    HelpStubHookIsSet = FALSE;
  }
}

